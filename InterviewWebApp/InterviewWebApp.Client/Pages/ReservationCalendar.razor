@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Globalization

<div id="calendar"></div>

<EventModal>
    <ModalBody>
        <p><strong>Datum:</strong> @selectedDate</p>
        @if (interviewsByDate != null && interviewsByDate.Any())
        {
            <ul>
                @foreach (var interview in interviewsByDate)
                {
                    <li>@interview.Start.ToString("HH:mm")-@interview.End.ToString("HH:mm") - RESERVED</li>
                    reservedTimeSlots.Add($"{interview.Start.ToString("HH:mm")}-{interview.End.ToString("HH:mm")}");
                }
            </ul>
        }
        else
        {
            <p>Pro toto datum nejsou žádné pohovory.</p>
        }

        @if (selectedDateIsInFuture)  
        {
            <p>Vyberte čas:</p>
            <div>
                @foreach (var timeSlot in timeSlots.Where(ts => !reservedTimeSlots.Contains(ts)))
                {
                    <div>
                        <input type="radio" id="@timeSlot" name="interviewTime" value="@timeSlot" @onclick="(e) => SetSelectedTimeSlot(e, timeSlot)">
                        <label for="@timeSlot">@timeSlot</label>
                    </div>
                }
            </div>
            <div>
                <p>Vaše jméno</p>
                <input type="text" @bind="interviewTitle" placeholder="Vaše jméno">
            </div>
        }
    </ModalBody>
    <ModalFooter>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zrušit</button>
        @if (selectedDateIsInFuture)
        {
            <button type="button" class="btn btn-primary" @onclick="RegisterInterview">Rezervovat</button>
        }
    </ModalFooter>
</EventModal>

<BookEventErrorModal @bind-ShowErrorModal="showErrorModal" JSRuntime="@JSRuntime">
    <ModalBody>
        <div>@errorMessage</div>
    </ModalBody>
</BookEventErrorModal>

@code {
    private string selectedDate;
    private dynamic[] interviewsByCode;
    private SimpleInterview[] interviewsByDate;
    private readonly List<string> timeSlots = new List<string>
    {
        "9:00-10:00", "10:00-11:00", "11:00-12:00", "12:00-13:00", "13:00-14:00",
        "14:00-15:00", "15:00-16:00", "16:00-17:00"
    };
    private List<string> reservedTimeSlots = new List<string>();
    private string selectedTimeSlot;
    private string interviewTitle;
    private bool showErrorModal = false;
    private string errorMessage = "";
    private bool selectedDateIsInFuture;

    [Parameter]
    public string Code { get; set; }
    [Parameter]
    public EventCallback<DateTime> OnDateClicked { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetInterviews();
            await JSRuntime.InvokeVoidAsync("initCalendar", DotNetObjectReference.Create(this), interviewsByCode);
            UpdateSelectedDateStatus();
        }
    }

    [JSInvokable]
    public async Task HandleDateClick(string selectedDate)
    {
        this.selectedDate = selectedDate;
        await GetInterviewsByDate();
        UpdateSelectedDateStatus();
        await JSRuntime.InvokeVoidAsync("openEventModal");
        StateHasChanged();
    }
    private void UpdateSelectedDateStatus()
    {
        if(selectedDate != null)
        {
            selectedDateIsInFuture = DateTime.Parse(selectedDate) >= DateTime.Today;
        }        
    }
    private async Task GetInterviews()
    {
        await JSRuntime.InvokeAsync<object>("console.log", $"/api/calendar/interviewsByCode?code={Code}");

        var response = await HttpClient.GetAsync($"/api/calendar/interviewsByCode?code={Code}");

        if (response.IsSuccessStatusCode)
        {
            interviewsByCode = await response.Content.ReadFromJsonAsync<dynamic[]>();
        }
        else
        {
        }
    }
    private async Task GetInterviewsByDate()
    {
        ClearReservedTimeSlots();
        var response = await HttpClient.GetAsync($"/api/calendar/interviewsByDate?selectedDate={selectedDate}&code={Code}");

        if (response.IsSuccessStatusCode)
        {
            interviewsByDate = await response.Content.ReadFromJsonAsync<SimpleInterview[]>();
        }
        else
        {
            
        }
    }
    public class RegisterInterviewModel
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Title { get; set; }
    }
    private async Task RegisterInterview()
    {
        try
        {
            var selectedDateTime = DateTime.ParseExact($"{selectedDate} {selectedTimeSlot.Split('-')[0]}", "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture);

            if (selectedDateTime < DateTime.Now)
            {
                errorMessage = "Nelze registrovat interview v minulosti.";
                showErrorModal = true;
                return;
            }
            if (string.IsNullOrEmpty(selectedTimeSlot) && string.IsNullOrEmpty(interviewTitle))
            {
                errorMessage = "Zadejte datum a jméno";
                showErrorModal = true;
                return;
            }

            if (string.IsNullOrEmpty(selectedTimeSlot))
            {
                errorMessage = "Vyberte čas";
                showErrorModal = true;
                return;
            }

            if (string.IsNullOrEmpty(interviewTitle))
            {
                errorMessage = "Zadejte jméno";
                showErrorModal = true;
                return;
            }

            var interviewData = new RegisterInterviewModel
                {
                    Start = DateTime.ParseExact($"{selectedDate} {selectedTimeSlot.Split('-')[0]}", "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture),
                    End = DateTime.ParseExact($"{selectedDate} {selectedTimeSlot.Split('-')[1]}", "yyyy-MM-dd HH:mm", CultureInfo.InvariantCulture),
                    Title = interviewTitle
                };

            var response = await HttpClient.PostAsJsonAsync($"/api/calendar/registerInterview?code={Code}", interviewData);

            if (response.IsSuccessStatusCode)
            {
                errorMessage = "Termín rezervován, děkujeme.";
                showErrorModal = true;
                await JSRuntime.InvokeVoidAsync("console.log", "Success");
            }
            else
            {
                errorMessage = $"Při registraci pohovoru došlo k chybě: {response.ReasonPhrase}";
                showErrorModal = true;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Při registraci pohovoru došlo k chybě: {ex.Message}";
            showErrorModal = true;
        }
    }
    private void SetSelectedTimeSlot(MouseEventArgs e, string timeSlot)
    {
        selectedTimeSlot = timeSlot;
    }

    private void ClearReservedTimeSlots()
    {
        reservedTimeSlots.Clear();
    }
    public class SimpleInterview
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Title { get; set; }
    }
}
