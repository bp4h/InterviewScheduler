@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

<div id="calendar"></div>

<EventModal>
    <ModalBody>
        <p><strong>Date:</strong> @selectedDate</p>
        @if (interviewsByDate != null && interviewsByDate.Any())
        {
            <ul>
                @foreach (var interview in interviewsByDate)
                {
                    <li>@interview.Title</li>
                }
            </ul>
        }
        else
        {
            <p>No interviews for this date.</p>
        }
    </ModalBody>
</EventModal>
@code {
    private string selectedDate;
    private dynamic[] interviewsByCode;
    private SimpleInterview[] interviewsByDate;

    [Parameter]
    public string Code { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetInterviews();
            await JSRuntime.InvokeVoidAsync("initCalendar", DotNetObjectReference.Create(this), interviewsByCode);
        }
    }

    [JSInvokable]
    public async Task HandleDateClick(string selectedDate)
    {
        this.selectedDate = selectedDate;
        await GetInterviewsByDate();
        await JSRuntime.InvokeVoidAsync("openEventModal");
        StateHasChanged();
    }

    [Parameter]
    public EventCallback<DateTime> OnDateClicked { get; set; }

    private async Task GetInterviews()
    {
        await JSRuntime.InvokeAsync<object>("console.log", $"/api/calendar/interviewsByCode?code={Code}");

        var response = await HttpClient.GetAsync($"/api/calendar/interviewsByCode?code={Code}");

        if (response.IsSuccessStatusCode)
        {
            interviewsByCode = await response.Content.ReadFromJsonAsync<dynamic[]>();
        }
        else
        {
        }
    }
    private async Task GetInterviewsByDate()
    {
        var response = await HttpClient.GetAsync($"/api/calendar/interviewsByDate?selectedDate={selectedDate}&code={Code}");

        if (response.IsSuccessStatusCode)
        {
            interviewsByDate = await response.Content.ReadFromJsonAsync<SimpleInterview[]>();
        }
        else
        {
            
        }
    }
    public class SimpleInterview
    {
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
        public string Title { get; set; }
    }
}
